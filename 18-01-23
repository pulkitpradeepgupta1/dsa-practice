class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size(); // 10,000
        vector<int> result; 
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    result.push_back(i);
                    result.push_back(j); // O(n^2)
                }
            }
        }
        return result; 
    }
};

#include<unordered_map>
#include<map>

class Solution {
public:
    // [5, 6, 7], target = 12
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> neha; 
        neha.insert(nums[i], i); 

    }
};

// O(20), O(400), O(8000)
// O(n) = O(10,000) // n = 10,000
// O(n^2) = O(1,00,00,000)
// 1 s = 3 * 10^8 cycles
// O(3 * 10^8) = 1s
// O(10^8) = 0.33s

// n = 10^5 
// 10^10 = 10^2 * 10^8 = 100 crore
// O(n^2) = O(100,00,00,000) = 33.33 s >> 1 s

// a ^ b * a ^ c = a ^ (b + c)

// Hint: this problem can be solved in O(n) appraoch using two-pointer method



/*
  int i = 0;
  int j = nums.size() - 1;

  i           j
  5   8   7   12    | target = 13

  5 7 8 12

  Hash Map:
  word: meaning

  key: value

  neha = 
  5 : 0
  8 : 1
  7 : 2
  12 : 3

  neha[5] = 0
  neha[8] = 1
  neha[7] = 2
  neha[key] = value



*/
